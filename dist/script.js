/*
 * ATTENTION: The "eval" devtool has been used (maybe by default in mode: "development").
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
/******/ (() => { // webpackBootstrap
/******/ 	var __webpack_modules__ = ({

/***/ "./src/script.js":
/*!***********************!*\
  !*** ./src/script.js ***!
  \***********************/
/***/ (() => {

eval("let themeSwitch = document.getElementById(\"toggle\");\nthemeSwitch.addEventListener(\"change\", (e) => document.body.setAttribute(\"data-theme\", e.target.value));\n\nconst VALID_KEYS = [\n  \"1\",\n  \"2\",\n  \"3\",\n  \"4\",\n  \"5\",\n  \"6\",\n  \"7\",\n  \"8\",\n  \"9\",\n  \"0\",\n  \".\",\n  \"Backspace\",\n  \"Delete\",\n  \"ArrowLeft\",\n  \"ArrowRight\",\n];\nconst display = document.getElementById(\"display\");\nconst heldDisplay = document.getElementById(\"held-calc\");\nconst buttons = document.querySelectorAll(\"[data-key]\");\n\n//TODO: Limit size of answer, provide eX when answer exceeds bounds of display using toExponential()\n//TODO: Limit size of heldDisplay, provide eX when answer exceeds bounds\n//TODO: Limit size of decimals to 10 places(?)\n\nlet heldCalculationValue = 0;\nlet heldCalculationOperator = \"+\";\nlet state = State();\n\nlet operators = document.querySelectorAll(\"[data-operator]\");\noperators.forEach(operator => {\n  operator.addEventListener(\"click\", (e) => {\n    let key = e.target.getAttribute(\"data-operator\");\n    let displayedValue = display.value;\n    state.operateOnState(displayedValue);\n    state.setOperator(key);\n  })\n})\n\nbuttons.forEach((button) => {\n  button.addEventListener(\"click\", (e) => {\n    let key = e.target.getAttribute(\"data-key\");\n    let displayedValue = display.value;\n    switch (e.target.getAttribute(\"data-key\")) {\n      case \"+\":\n      case \"-\":\n      case \"x X *\":\n      case \"/\":\n      case \"Enter =\":\n        switch (heldCalculationOperator) {\n          case \"+\":\n            heldCalculationValue += +displayedValue;\n            break;\n          case \"-\":\n            heldCalculationValue -= +displayedValue;\n            break;\n          case \"x\":\n            heldCalculationValue *= +displayedValue;\n            break;\n          case \"/\":\n            heldCalculationValue /= +displayedValue;\n            break;\n        }\n        heldCalculationOperator = operator(key);\n        heldDisplay.textContent = heldDisplayValue(key);\n        display.value = displayValue(key);\n        break;\n      case \"Delete Backspace\":\n        if (heldCalculationOperator == \"=\") {\n         heldCalculationValue = \"0\";\n         heldCalculationOperator = \"+\"; \n        }\n        if (display.value == \"\") {\n          display.value = \"0\";\n        } else {\n          display.value = displayedValue.slice(0, -1);\n        }\n        break;\n      case \"C c\":\n        display.value = \"0\";\n        \n        heldCalculationValue = \"0\";\n        heldCalculationOperator = \"+\";\n        \n        heldDisplay.textContent = \"\";\n        break;\n      case \".\":\n        if (display.value.includes(\".\")) break;\n      default:\n        if (heldCalculationOperator == \"=\") {\n          display.value = \"0\";\n         \n          heldCalculationValue = \"0\";\n          heldCalculationOperator = \"+\";\n        }\n        if (display.value == \"0\") {\n          display.value = newNumeric(key);\n        } else {\n          display.value += key;\n        }\n        break;\n    }\n\n    function newNumeric(key) {\n      if (key == \".\") {\n        return \"0\" + key;\n      } else {\n        return key;\n      }\n    }\n\n    function operator(key) {\n      if (key == \"x X *\") {\n        return \"x\";\n      } else if (key == \"Enter =\") {\n        return \"=\";\n      } else {\n        return key;\n      }\n    }\n\n    function heldDisplayValue(key) {\n      if (key == \"Enter =\") {\n        return \"\";\n      } else {\n        return +heldCalculationValue + \" \" + operator(key) + \" \";\n      }\n    }\n\n    function displayValue(key) {\n      if (key == \"Enter =\") {\n        return +heldCalculationValue;\n      } else {\n        return \"0\";\n      }\n    }\n  });\n});\n\nfunction State() {\n  let value = \"0\";\n  let operator = \"+\";\n\n  function operateOnState(newValue) {\n    newValue = +newValue;\n    switch (operator) {\n      case \"+\":\n        value += newValue;\n        break;\n      case \"-\":\n        value -= newValue;\n        break;\n      case \"x\":\n        value *= newValue;\n        break;\n      case \"/\":\n        value /= newValue;\n        break;\n    }\n  }\n\n  function setOperator(newOperator) {\n    operator = newOperator;\n    console.log(operator);\n  }\n\n  function setValue(newValue) {\n    value = newValue;\n  }\n\n  function getValue() {\n    return value;\n  }\n  \n  return {\n    operateOnState,\n    setOperator,\n    setValue,\n    getValue,\n  }\n}\n  // let displayedValue = display.value;\n  //     heldCalculationOperator = operator(key);\n  //     heldDisplay.textContent = heldDisplayValue(key);\n  //     display.value = displayValue(key);\n  //     break;\n  //   case \"Delete Backspace\":\n  //     if (heldCalculationOperator == \"=\") {\n  //       heldCalculationValue = \"0\";\n  //       heldCalculationOperator = \"+\"; \n  //     }\n  //     if (display.value == \"\") {\n  //       display.value = \"0\";\n  //     } else {\n  //       display.value = displayedValue.slice(0, -1);\n  //     }\n  //     break;\n  //   case \"C c\":\n  //     display.value = \"0\";\n      \n  //     heldCalculationValue = \"0\";\n  //     heldCalculationOperator = \"+\";\n      \n  //     heldDisplay.textContent = \"\";\n  //     break;\n  //   case \".\":\n  //     if (display.value.includes(\".\")) break;\n  //   default:\n  //     if (heldCalculationOperator == \"=\") {\n  //       display.value = \"0\";\n        \n  //       heldCalculationValue = \"0\";\n  //       heldCalculationOperator = \"+\";\n  //     }\n  //     if (display.value == \"0\") {\n  //       display.value = newNumeric(key);\n  //     } else {\n  //       display.value += key;\n  //     }\n  //     break;\n  // }\n\n  // function newNumeric(key) {\n  //   if (key == \".\") {\n  //     return \"0\" + key;\n  //   } else {\n  //     return key;\n  //   }\n  // }\n\n  // function operator(key) {\n  //   if (key == \"x X *\") {\n  //     return \"x\";\n  //   } else if (key == \"Enter =\") {\n  //     return \"=\";\n  //   } else {\n  //     return key;\n  //   }\n  // }\n\n  // function heldDisplayValue(key) {\n  //   if (key == \"Enter =\") {\n  //     return \"\";\n  //   } else {\n  //     return +heldCalculationValue + \" \" + operator(key) + \" \";\n  //   }\n  // }\n\n  // function displayValue(key) {\n  //   if (key == \"Enter =\") {\n  //     return +heldCalculationValue;\n  //   } else {\n  //     return \"0\";\n  //   }\n  // }\n\n\n//# sourceURL=webpack://calculator-app-working/./src/script.js?");

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module can't be inlined because the eval devtool is used.
/******/ 	var __webpack_exports__ = {};
/******/ 	__webpack_modules__["./src/script.js"]();
/******/ 	
/******/ })()
;